# AIFOLIO Elite Supervisor Configuration
# Phase 1.11 - Advanced CI/CD Integration
# Process management for production deployment

[supervisord]
nodaemon=true
user=root
logfile=/var/log/aifolio/supervisord.log
pidfile=/var/run/aifolio/supervisord.pid
childlogdir=/var/log/aifolio
loglevel=info

[unix_http_server]
file=/var/run/aifolio/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/aifolio/supervisor.sock

# Nginx Web Server
[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
startretries=3
stdout_logfile=/var/log/aifolio/nginx.log
stderr_logfile=/var/log/aifolio/nginx_error.log
user=root
priority=100

# Node.js Application Server
[program:nodejs]
command=node server.js
directory=/app
autostart=true
autorestart=true
startretries=5
user=aifolio
environment=NODE_ENV=production,PORT=3000
stdout_logfile=/var/log/aifolio/nodejs.log
stderr_logfile=/var/log/aifolio/nodejs_error.log
priority=200
stopwaitsecs=10

# Python API Server (Optional)
[program:python-api]
command=python app.py
directory=/app
autostart=false
autorestart=true
startretries=3
user=aifolio
environment=FLASK_ENV=production,FLASK_APP=app.py,PORT=5000
stdout_logfile=/var/log/aifolio/python.log
stderr_logfile=/var/log/aifolio/python_error.log
priority=300
stopwaitsecs=5

# Redis Server (if needed)
[program:redis]
command=redis-server --port 6379 --bind 127.0.0.1
autostart=false
autorestart=true
startretries=3
user=aifolio
stdout_logfile=/var/log/aifolio/redis.log
stderr_logfile=/var/log/aifolio/redis_error.log
priority=150

# Celery Worker (if needed)
[program:celery-worker]
command=celery -A app.celery worker --loglevel=info
directory=/app
autostart=false
autorestart=true
startretries=3
user=aifolio
environment=CELERY_BROKER_URL=redis://localhost:PORT/0
stdout_logfile=/var/log/aifolio/celery_worker.log
stderr_logfile=/var/log/aifolio/celery_worker_error.log
priority=400
stopwaitsecs=30
killasgroup=true
stopasgroup=true

# Celery Beat Scheduler (if needed)
[program:celery-beat]
command=celery -A app.celery beat --loglevel=info
directory=/app
autostart=false
autorestart=true
startretries=3
user=aifolio
environment=CELERY_BROKER_URL=redis://localhost:PORT/0
stdout_logfile=/var/log/aifolio/celery_beat.log
stderr_logfile=/var/log/aifolio/celery_beat_error.log
priority=450
stopwaitsecs=10

# Log Rotation Service
[program:logrotate]
command=/usr/sbin/crond -f
autostart=true
autorestart=true
startretries=3
user=root
stdout_logfile=/var/log/aifolio/logrotate.log
stderr_logfile=/var/log/aifolio/logrotate_error.log
priority=50

# Health Check Monitor
[program:healthcheck]
command=/bin/sh -c "while true; do /app/healthcheck.sh && sleep 30 || sleep 5; done"
autostart=true
autorestart=true
startretries=3
user=aifolio
stdout_logfile=/var/log/aifolio/healthcheck.log
stderr_logfile=/var/log/aifolio/healthcheck_error.log
priority=500

# Group configurations for easier management
[group:web]
programs=nginx,nodejs
priority=100

[group:api]
programs=python-api
priority=200

[group:workers]
programs=celery-worker,celery-beat
priority=300

[group:infrastructure]
programs=redis,logrotate,healthcheck
priority=400
