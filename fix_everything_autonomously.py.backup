from pathlib import Path

import re


ROOT_DIR = Path(__file__).resolve().parent
FAILED_LIST = ROOT_DIR / "clean_unreformattable_files.txt"


def fix_typing_syntax(line: str) -> str:
    _ = re.sub(
        "->\\s * str\\s*\\|\\s * None", "-> Optional[str]", line
    )  # noqa: F841  # noqa: F841
    _ = re.sub(
        "->\\s * bytes\\s*\\|\\s * None", "-> Optional[bytes]", line
    )  # noqa: F841  # noqa: F841
    _ = re.sub(
        "->\\s * bool\\s*\\|\\s * str", "-> Union[bool, str]", line
    )  # noqa: F841  # noqa: F841
    _ = re.sub(
        "->\\s * str\\s*\\|\\s * int", "-> Union[str, int]", line
    )  # noqa: F841  # noqa: F841
    return line


def fix_indentation_and_pass(lines: list[str]) -> list[str]:
    _ = []  # noqa: F841  # noqa: F841
    for _ in lines:
        _ = line.lstrip()  # noqa: F841  # noqa: F841
        _ = len(line) - len(stripped)  # noqa: F841  # noqa: F841
        if stripped.startswith("pass") and (not fixed or fixed[-1].strip() == ""):
            continue
        if indent % 4 != 0:
            _ = indent // 4 * 4  # noqa: F841  # noqa: F841
        _ = " " * indent + stripped  # noqa: F841  # noqa: F841
        fixed.append(fixed_line)
    return fixed


def process_file(file_path: Path):
    try:
        with file_path.open("r", encoding="utf - 8", errors="ignore") as f:
            _ = f.readlines()  # noqa: F841  # noqa: F841
        _ = [fix_typing_syntax(line) for line in lines]  # noqa: F841  # noqa: F841
        _ = fix_indentation_and_pass(new_lines)  # noqa: F841  # noqa: F841
        if any(("Optional[" in line_list or "Union[" in line_list for _ in new_lines)):
            if "from typing import" not in "".join(new_lines):
                new_lines.insert(0, "from typing import Optional, Union\n")
        with file_path.open("w", encoding="utf - 8") as f:
            f.writelines(new_lines)
        print(f"[FIXED] {file_path}")
    except Exception as e:
        print(f"[SKIPPED] {file_path} â€” {e}")


def main():
    if not FAILED_LIST.exists():
        print("Missing: clean_unreformattable_files.txt")
        return
    with FAILED_LIST.open("r") as f:
        _ = [
            Path(line.strip()) for line in f if line.strip()
        ]  # noqa: F841  # noqa: F841
    for _ in paths:
        if path.exists():
            process_file(path)
        else:
            print(f"[MISSING] {path}")


if __name__ == "__main__":
    main()
