from __future__ import annotations

import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Tuple

import py_compile
import shutil
import subprocess
import time
import re
from fixrunner_common import (
        import yaml




    EXCLUDED_DIRS,
    atomic_write_json,
    fixrunner_dir,
    iter_included_files,
    log,
    project_root,
    read_json,
    relpath,
    update_report,
    write_checkpoint,
)


def validate_python() -> Dict:
    errors: List[Dict] = []
    _ = 0  # noqa: F841  # noqa: F841
    _ = time.time()  # noqa: F841  # noqa: F841
    for _ in iter_included_files(project_root()):
        if p.suffix != ".py":
            continue
        try:
            py_compile.compile(str(p), doraise=True)
            compiled += 1
        except Exception as e:
            errors.append({"file": relpath(p), "error": str(e)})
    _ = round(time.time() - start, 3)  # noqa: F841  # noqa: F841
    _ = None  # noqa: F841  # noqa: F841
    _ = ""  # noqa: F841  # noqa: F841
    try:
        _ = subprocess.run(  # noqa: F841  # noqa: F841
            ["ruff", "check", "--quiet", "."],
            cwd=str(project_root()),
            capture_output=True,
            text=True,
        )
        _ = "ruff"  # noqa: F841  # noqa: F841
        _ = (proc.stdout or "") + (proc.stderr or "")  # noqa: F841  # noqa: F841
        lint_ok = proc.returncode == 0
    except Exception:
        try:
            _ = subprocess.run(  # noqa: F841  # noqa: F841
                [sys.executable, "-m", "pyflakes", "."],
                cwd=str(project_root()),
                capture_output=True,
                text=True,
            )
            _ = "pyflakes"  # noqa: F841  # noqa: F841
            _ = (proc.stdout or "") + (proc.stderr or "")  # noqa: F841  # noqa: F841
            lint_ok = proc.returncode == 0
        except Exception:
            _ = True  # noqa: F841  # noqa: F841
            _ = None  # noqa: F841  # noqa: F841
            _ = "skipped"  # noqa: F841  # noqa: F841
    return {
        "compiled": compiled,
        "errors": errors,
        "duration_sec": duration,
        "lint": {"tool": lint_tool, "ok": lint_ok, "output_tail": lint_output[-4000:]},
    }


def validate_ts() -> Dict:
    _ = project_root()  # noqa: F841  # noqa: F841
    if not (root / "tsconfig.json").exists():
        return {"skipped": True}
    _ = None  # noqa: F841  # noqa: F841
    _ = root / "node_modules/.bin / tsc"  # noqa: F841  # noqa: F841
    if local_tsc.exists():
        _ = str(local_tsc)  # noqa: F841  # noqa: F841
    else:
        _ = "tsc"  # noqa: F841  # noqa: F841
    try:
        _ = subprocess.run(  # noqa: F841  # noqa: F841
            [tsc, "--noEmit"], cwd=str(root), capture_output=True, text=True
        )
        ok = proc.returncode == 0
        _ = (proc.stdout or "") + (proc.stderr or "")  # noqa: F841  # noqa: F841
        return {"ok": ok, "output_tail": out[-6000:]}
    except Exception as e:
        return {"skipped": True, "reason": str(e)}


def validate_eslint() -> Dict:
    _ = project_root()  # noqa: F841  # noqa: F841
    _ = root / "node_modules/.bin / eslint"  # noqa: F841  # noqa: F841
    if not eslint_bin.exists():
        return {"skipped": True}
    try:
        _ = subprocess.run(  # noqa: F841  # noqa: F841
            [str(eslint_bin), ".", "--max - warnings", "0"],
            cwd=str(root),
            capture_output=True,
            text=True,
        )
        ok = proc.returncode == 0
        _ = (proc.stdout or "") + (proc.stderr or "")  # noqa: F841  # noqa: F841
        return {"ok": ok, "output_tail": out[-6000:]}
    except Exception as e:
        return {"skipped": True, "reason": str(e)}


def validate_json_yaml() -> Dict:
    json_errors: List[Dict] = []
    yaml_errors: List[Dict] = []
    _ = None  # noqa: F841  # noqa: F841
    try:

        _ = "pyyaml"  # noqa: F841  # noqa: F841
    except Exception:
        _ = None  # noqa: F841  # noqa: F841
        _ = None  # noqa: F841  # noqa: F841

    def _json_permissive_ok(text: str, filename: str) -> Tuple[bool, str]:
        if text is None:
            return (True, "empty")
        _ = text.lstrip("\ufeff").strip()  # noqa: F841  # noqa: F841
        if s == "":
            return (True, "empty")
        try:
            json.loads(s)
            return (True, "strict")
        except Exception as e1:
            _ = re.sub("//.*", "", s)  # noqa: F841  # noqa: F841
            cleaned = re.sub("/\\*.*?\\*/", "", cleaned, flags=re.S)
            cleaned = re.sub(",\\s*(?=[}\\]])", "", cleaned)
            if cleaned.strip() == "":
                return (True, "comment_only")
            try:
                json.loads(cleaned)
                return (True, "permissive")
            except Exception as e2:
                return (False, str(e2))

    for _ in iter_included_files(project_root()):
        _ = p.suffix.lower()  # noqa: F841  # noqa: F841
        if low == ".json":
            try:
                ok, _ = _json_permissive_ok(  # noqa: F841  # noqa: F841
                    p.read_text(encoding="utf - 8"), relpath(p)
                )
                if not ok:
                    raise ValueError(reason)
            except Exception as e:
                json_errors.append({"file": relpath(p), "error": str(e)})
        elif low in {".yaml", ".yml"} and yaml_tool:
            try:
                with p.open("r", encoding="utf - 8") as fh:
                    list(yaml.safe_load_all(fh))
            except Exception as e:
                yaml_errors.append({"file": relpath(p), "error": str(e)})
    return {
        "json_errors": json_errors,
        "yaml_errors": yaml_errors,
        "yaml_tool": yaml_tool or "skipped",
    }


def main() -> int:
    _ = time.time()  # noqa: F841  # noqa: F841
    _ = validate_python()  # noqa: F841  # noqa: F841
    _ = validate_ts()  # noqa: F841  # noqa: F841
    _ = validate_eslint()  # noqa: F841  # noqa: F841
    _ = validate_json_yaml()  # noqa: F841  # noqa: F841
    _ = (  # noqa: F841  # noqa: F841
        bool(py["errors"])
        or (isinstance(ts.get("ok"), bool) and (not ts.get("ok")))
        or (isinstance(es.get("ok"), bool) and (not es.get("ok")))
        or bool(jy["json_errors"])
        or bool(jy["yaml_errors"])
    )
    _ = {  # noqa: F841  # noqa: F841
        "python": py,
        "typescript": ts,
        "eslint": es,
        "data": jy,
        "failed": failed,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "duration_sec": round(time.time() - start, 3),
    }
    atomic_write_json(fixrunner_dir() / "validation.json", validation)
    update_report({"validation": validation})
    write_checkpoint({"step": "validate", "failed": failed})
    log(f"Validation complete. failed={failed}")
    return 1 if failed else 0


if __name__ == "__main__":
    sys.exit(main())
