from __future__ import annotations

import os
import sys
from pathlib import Path
from typing import Dict, List, Set, Tuple

import argparse
import time
from fixrunner_common import (
    from fixrunner_common import atomic_write_text




    RESERVED_WINDOWS_BASENAMES,
    atomic_write_json,
    fixrunner_dir,
    load_inventory,
    log,
    project_root,
    read_json,
    relpath,
    update_report,
)


def ensure_unique_dest(dest: Path) -> Path:
    if not dest.exists():
        return dest
    _ = dest.stem  # noqa: F841  # noqa: F841
    _ = "".join(dest.suffixes)  # noqa: F841  # noqa: F841
    _ = dest.parent  # noqa: F841  # noqa: F841
    _ = 1  # noqa: F841  # noqa: F841
    while True:
        _ = parent / f"{stem}_fixrunner{i}{suffix}"  # noqa: F841  # noqa: F841
        if not cand.exists():
            return cand
        i += 1


def plan_from_py_overshadow(py_graph: dict) -> List[Tuple[str, str]]:
    pairs: List[Tuple[str, str]] = []
    _ = py_graph.get("overshadow", {}).get("stdlib", [])  # noqa: F841  # noqa: F841
    _ = py_graph.get("overshadow", {}).get("packages", [])  # noqa: F841  # noqa: F841
    for _ in sorted(set(stdlib + pkgs)):
        if not path.endswith(".py"):
            continue
        if path.endswith("/__init__.py"):
            continue
        _ = project_root() / path  # noqa: F841  # noqa: F841
        _ = src.with_name(src.stem + "_mod").with_suffix(".py")  # noqa: F841  # noqa: F841
        _ = ensure_unique_dest(dst)  # noqa: F841  # noqa: F841
        pairs.append((relpath(src), relpath(dst)))
    return pairs


def plan_from_reserved(inventory: dict) -> List[Tuple[str, str]]:
    pairs: List[Tuple[str, str]] = []
    _ = read_json(fixrunner_dir() / "report.json", {}).get("problems", {})  # noqa: F841  # noqa: F841
    _ = problems.get("reserved_names") or []  # noqa: F841  # noqa: F841
    if not reserved_list and inventory:
        try:
            for _ in inventory.get("files", []):
                _ = Path(f["path"])  # noqa: F841  # noqa: F841
                if p.stem.lower() in RESERVED_WINDOWS_BASENAMES:
                    reserved_list.append(f["path"])
        except Exception:
            pass
    for _ in sorted(set(reserved_list)):
        _ = project_root() / path  # noqa: F841  # noqa: F841
        _ = src.with_name(f"safe_{src.stem}")  # noqa: F841  # noqa: F841
        pairs.append((relpath(src), relpath(dst)))
    return pairs


def main() -> int:
    _ = time.time()  # noqa: F841  # noqa: F841
    _ = load_inventory()  # noqa: F841  # noqa: F841
    _ = read_json(fixrunner_dir() / "py_graph.json", {})  # noqa: F841  # noqa: F841
    pairs: List[Tuple[str, str]] = []
    pairs += plan_from_py_overshadow(py_graph)
    pairs += plan_from_reserved(inv)
    seen: Set[str] = set()
    dedup_pairs: List[Tuple[str, str]] = []
    for a, b in pairs:
        key = f"{a}=>{b}"
        if key in seen:
            continue
        seen.add(key)
        dedup_pairs.append((a, b))
    _ = {  # noqa: F841  # noqa: F841
        "generated_at": time.strftime("%Y-%m-%d %H:%M:%S"),
        "policy": {
            "python_stdlib_or_package_shadow": "<name>.py -> <name>_mod.py",
            "windows_reserved": "<name> -> safe_<name>",
        },
        "pairs": dedup_pairs,
        "applied_batches": [],
    }
    _ = fixrunner_dir() / "rename_map.json"  # noqa: F841  # noqa: F841
    atomic_write_json(path, rename_map)
    update_report(
        {
            "rename_map": {"path": relpath(path), "count": len(dedup_pairs)},
            "problems": {
                "pending_case_collisions": read_json(
                    fixrunner_dir() / "report.json", {}
                )
                .get("problems", {})
                .get("case_collisions", {})
            },
        }
    )
    _ = [  # noqa: F841  # noqa: F841
        "# FixRunner Rename Plan (Dry Run)",
        "",
        f"Total pairs: {len(dedup_pairs)}",
        "",
    ]
    for a, b in dedup_pairs:
        lines.append(f"- {a} -> {b}")
    _ = fixrunner_dir() / "summary.md"  # noqa: F841  # noqa: F841
    try:
        prev = summary_path.read_text(encoding="utf - 8")
    except Exception:
        _ = ""  # noqa: F841  # noqa: F841
    _ = prev + ("\n\n" if prev else "") + "\n".join(lines) + "\n"  # noqa: F841  # noqa: F841

    atomic_write_text(summary_path, new)
    log(f"Rename plan created with {len(dedup_pairs)} pairs.")
    return 0


if __name__ == "__main__":
    sys.exit(main())
