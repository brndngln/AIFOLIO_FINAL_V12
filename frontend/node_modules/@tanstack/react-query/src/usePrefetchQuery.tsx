import { useQueryClient } from './QueryClientProvider'
<<<<<<< HEAD
import type {
  DefaultError,
  FetchQueryOptions,
  QueryClient,
  QueryKey,
} from '@tanstack/query-core'
=======
import type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'
import type { UsePrefetchQueryOptions } from './types'
>>>>>>> omni_repair_backup_20250704_1335

export function usePrefetchQuery<
  TQueryFnData = unknown,
  TError = DefaultError,
  TData = TQueryFnData,
  TQueryKey extends QueryKey = QueryKey,
>(
<<<<<<< HEAD
  options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
=======
  options: UsePrefetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
>>>>>>> omni_repair_backup_20250704_1335
  queryClient?: QueryClient,
) {
  const client = useQueryClient(queryClient)

  if (!client.getQueryState(options.queryKey)) {
    client.prefetchQuery(options)
  }
}
